{"version":3,"sources":["components/Top.js","other/api.js","components/Home.js","components/Topic.js","other/utils.js","components/AddTopic.js","components/AddPost.js","components/index.js","App.js","serviceWorker.js","index.js"],"names":["button","link","AppBar","position","Toolbar","style","textDecoration","color","flexGrow","to","Typography","variant","Button","api","getTopics","a","fetch","res","json","console","error","addTopic","data","method","headers","body","JSON","stringify","getTopicInfo","topic","URL","getTopicPosts","addPost","useState","topics","setTopics","log","useEffect","then","Top","Container","maxWidth","textAlign","margin","Grid","container","item","xs","Paper","padding","elevation","List","map","x","index","key","_id","title","ListItem","marginBottom","fontWeight","props","description","setDescription","posts","setPosts","author","utils","validateAddTopic","length","Custom","styled","TextField","borderRadius","backgroundColor","Box","display","flexDirection","alignItems","justifyContent","height","Box2","width","Element","zIndex","Brand","Login","navigate","useNavigate","setTitle","loading","setLoading","setLocalSubmited","Submit","alert","handleKey","e","keyCode","document","addEventListener","removeEventListener","left","top","className","backgroundImage","onChange","event","target","value","id","label","multiline","rows","CircularProgress","marginTop","onClick","setAuthor","obj","Empty","children","Index","path","Home","Topic","AddTopic","AddPost","default","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.02f0e1c6.chunk.js","sourcesContent":["import React from 'react';\r\nimport {AppBar, Toolbar, Typography, Button, makeStyles} from \"@material-ui/core\";\r\nimport {Link} from \"@reach/router\";\r\n\r\n\r\nexport default ({button, link}) => {\r\n    return(\r\n        <AppBar position=\"static\">\r\n            <Toolbar>\r\n                <Link style = {{textDecoration: \"none\", color: \"white\", flexGrow: 1}} to = \"/SubDit\">\r\n                    <Typography variant=\"h4\">\r\n                        SubDit\r\n                    </Typography>\r\n                </Link>\r\n                <Link style ={{textDecoration: \"none\", color: \"inherit\"}} to = {link}>\r\n                    <Button color=\"inherit\">{button}</Button>\r\n                </Link>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}","const getTopics = async () =>{\r\n    let URL = \"https://vanilla2431.herokuapp.com/topics\";\r\n    try{\r\n        let res = await fetch(URL);\r\n        return res.json();\r\n    }\r\n    catch(e){\r\n        console.error(e);\r\n    }\r\n}\r\nconst addTopic = async (data) => {\r\n    let URL = \"https://vanilla2431.herokuapp.com/topics\";\r\n    try{\r\n        let res = await fetch(URL,{\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n        return res.json();\r\n    }\r\n    catch (e) {\r\n        console.error(e);\r\n    }\r\n}\r\nconst getTopicInfo = async (topic) => {\r\n    let URL = `https://vanilla2431.herokuapp.com/topics/${topic}`\r\n    try{\r\n        let res = await fetch(URL);\r\n        return res.json();\r\n    }\r\n    catch(e){\r\n        console.error(e);\r\n    }\r\n}\r\nconst getTopicPosts = async (topic) => {\r\n    let URL = `https://vanilla2431.herokuapp.com/posts/${topic}`\r\n    try{\r\n        let res = await fetch(URL);\r\n        return res.json();\r\n    }\r\n    catch (e) {\r\n        console.error(e);\r\n    }\r\n}\r\nconst addPost = async (topic, data) =>{\r\n    let URL = `https://vanilla2431.herokuapp.com/posts/${topic}`;\r\n    try{\r\n        let res = await fetch(URL,{\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n        return res.json();\r\n    }\r\n    catch (e) {\r\n        console.error(e);\r\n    }\r\n}\r\n\r\nconst api = {\r\n    getTopics,\r\n    addTopic,\r\n    getTopicInfo,\r\n    getTopicPosts,\r\n    addPost\r\n}\r\nexport default api;\r\n","import React, {useEffect, useState} from 'react'\r\nimport {Container, Button, Typography, List, ListItemText, ListItem, Grid, Paper} from \"@material-ui/core\";\r\nimport {Link} from \"@reach/router\";\r\nimport Top from \"./Top\";\r\nimport api from \"../other/api\";\r\n\r\nexport default () => {\r\n    const [topics, setTopics] = useState([]);\r\n    console.log(topics);\r\n    useEffect(() => {\r\n        api.getTopics().then((data) =>{\r\n            setTopics(data);\r\n        })\r\n    }, []);\r\n    return(\r\n        <>\r\n            <Top button = \"Add A Topic\" link = \"/SubDit/addtopic\"/>\r\n            <Container maxWidth=\"md\">\r\n                <Typography style = {{textAlign: \"center\", margin: \"20px\"}} variant=\"h3\">\r\n                    Welcome to my swamp\r\n                </Typography>\r\n                <Grid container>\r\n                    <Grid item xs = {6}>\r\n                        <Paper style = {{padding: \"10px\", margin: \"10px\"}} elevation = {3}>\r\n                            <Typography variant = \"h5\">\r\n                                Explore the Topics:\r\n                            </Typography>\r\n                            <List>\r\n                                {topics.map((x, index) => (\r\n                                    <Link style = {{textDecoration: \"none\", color: \"black\"}} key = {x._id} to = {\"/SubDit/topics/\" + x.title}>\r\n                                        <ListItem button>\r\n                                            <Typography variant=\"h6\">\r\n                                                {index+1}. {x.title}\r\n                                            </Typography>\r\n                                        </ListItem>\r\n                                    </Link>\r\n                                ))}\r\n                            </List>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs = {6}>\r\n                        <Paper style = {{padding: \"10px\", margin: \"10px\"}} elevation={3}>\r\n                            <Typography style ={{marginBottom: \"5px\"}} variant = \"h5\">\r\n                                About this Site:\r\n                            </Typography>\r\n                            <Typography style ={{fontWeight: 500}}variant = \"h5\">\r\n                                If you are here to test this magnificent piece of garbage, then HI!\r\n                            </Typography>\r\n                        </Paper>\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        </>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\r\nimport {Container, Paper, Typography} from \"@material-ui/core\";\r\nimport api from \"../other/api\";\r\nimport Top from \"./Top\";\r\n\r\nexport default (props) => {\r\n    const [title, setTitle] = useState(props.title);\r\n    const [description, setDescription] = useState(\"\");\r\n    const [posts, setPosts] = useState([]);\r\n    useEffect(() => {\r\n        api.getTopicInfo(title).then(x => {\r\n            setDescription(x.description);\r\n        });\r\n        api.getTopicPosts(title).then(x => {\r\n            console.log(x);\r\n            setPosts(x);\r\n        })\r\n    }, [])\r\n    return(\r\n        <>\r\n            <Top button = \"Add A Post\" link = {\"/SubDit/addpost/\" + title}/>\r\n            <Container maxWidth=\"md\">\r\n                <Typography variant = \"h4\">\r\n                    Topic: {title}\r\n                </Typography>\r\n                <Typography variant = \"h5\">\r\n                    Topic description: {description}\r\n                </Typography>\r\n                <Typography variant = \"h4\">\r\n                    Posts:\r\n                </Typography>\r\n                {posts.map(x => (\r\n                    <Paper elevation = {3} style = {{margin:10, padding:15}}>\r\n                        <Typography variant = \"h5\">\r\n                            {x.title}\r\n                        </Typography>\r\n                        <Typography variant = \"subtitle1\">\r\n                            {x.author}\r\n                        </Typography>\r\n                        <Typography variant = \"h6\">\r\n                            {x.description}\r\n                        </Typography>\r\n                    </Paper>\r\n                ))}\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n","const validateAddTopic = (topic) => {\r\n    if (topic.title.length <= 30 && topic.description.length <= 90){\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nconst utils = {\r\n    validateAddTopic: validateAddTopic\r\n}\r\n\r\nexport default utils;","import React, {useEffect, useState} from 'react';\r\nimport {useNavigate, Link } from \"@reach/router\";\r\nimport {TextField, Button, createMuiTheme, ThemeProvider, Typography, CircularProgress, Snackbar} from \"@material-ui/core\";\r\nimport { styled } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport '../wave.css';\r\nimport api from \"../other/api\"\r\nimport utils from \"../other/utils\";\r\nconst Custom = styled(TextField)({\r\n    borderRadius: \"4px\",\r\n    backgroundColor: \"rgb(255,255,255)\",\r\n});\r\n\r\nconst style = {\r\n    Box:{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        height: \"100vh\"\r\n    },\r\n    Box2:{\r\n        width: \"300px\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\"\r\n    },\r\n    Element: {\r\n        zIndex: \"1000\",\r\n        width: \"100%\",\r\n        marginBottom: \"15px\"\r\n    },\r\n    Brand:{\r\n        // position: \"absolute\",\r\n        // top: \"23%\",\r\n        marginBottom: \"30px\",\r\n        zIndex: \"1000\",\r\n        textAlign: \"center\",\r\n        color: \"white\"\r\n    }\r\n\r\n}\r\n\r\n\r\nconst Login = (props) => {\r\n    const navigate = useNavigate();\r\n    const [title, setTitle] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [loading, setLoading] = useState(false);\r\n    const [localSubmited, setLocalSubmited] = useState(false);\r\n\r\n    const Submit = () =>{\r\n        setLoading(true);\r\n        const data = {\r\n            title: title,\r\n            description: description\r\n        }\r\n        if (utils.validateAddTopic(data) === true) {\r\n            api.addTopic(data).then(x => {\r\n                console.log(x);\r\n                setLocalSubmited(true);\r\n                navigate(\"/SubDit\");\r\n            })\r\n        }\r\n        else{\r\n            alert(\"Title or Description length are too long.\\nConstraints:\\nTitle <= 30 characters\\nDescription <= 90 characters\\nYour title: \" + title.length + \" characters\\nYour Description: \" + description.length + \" characters\")\r\n            setLoading(false);\r\n        }\r\n    }\r\n    const handleKey = (e) => {\r\n        if (e.keyCode === 13){\r\n            Submit();\r\n        }\r\n    }\r\n    useEffect(() =>{\r\n        document.addEventListener(\"keyup\", handleKey);\r\n        return(() =>{\r\n            document.removeEventListener(\"keyup\", handleKey);\r\n        });\r\n    });\r\n    return(\r\n        <>\r\n            <Link to =\"/SubDit\" style ={{textDecoration: \"none\", color: \"White\", position: \"absolute\", left: \"15\", top: \"15\", zIndex: \"10000\"}}>\r\n                <Typography style = {{margin:\"15px\"}} variant = \"h5\">\r\n                    Back to Home\r\n                </Typography>\r\n            </Link>\r\n            <div style = {{backgroundColor: \"#27273C\"}}className=\"waveWrapper waveAnimation\">\r\n                <div className=\"waveWrapperInner bgTop\">\r\n                    <div className=\"wave waveTop\" style={{backgroundImage: \"url('http://front-end-noobs.com/jecko/img/wave-top.png'\"}}/>\r\n                </div>\r\n                <div className=\"waveWrapperInner bgMiddle\">\r\n                    <div className=\"wave waveMiddle\" style={{backgroundImage: \"url('http://front-end-noobs.com/jecko/img/wave-mid.png'\"}}/>\r\n                </div>\r\n                <div className=\"waveWrapperInner bgBottom\">\r\n                    <div className=\"wave waveBottom\" style={{backgroundImage: \"url('http://front-end-noobs.com/jecko/img/wave-bot.png'\"}}/>\r\n                </div>\r\n            </div>\r\n            <Box style = {style.Box} maxWidth = \"xs\">\r\n                <Typography style = {style.Brand} variant = \"h2\">Add A Topic</Typography>\r\n                <Box style = {style.Box2}>\r\n                    <Custom onChange = {event => setTitle(event.target.value)} value = {title} style ={style.Element} id=\"outlined-basic\" label=\"Title\" variant=\"filled\" />\r\n                    <Custom multiline rows = {3} onChange = {event => setDescription(event.target.value)} value = {description} style ={style.Element} id=\"outlined-basic\" label=\"Description\" variant=\"filled\" />\r\n                    {loading ?\r\n                        <CircularProgress style ={{zIndex: \"100\", marginTop: \"10px\"}}/> :\r\n                        <Button onClick={Submit} style={style.Element} variant=\"contained\" color=\"primary\">\r\n                            Submit\r\n                        </Button>}\r\n                </Box>\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login;","import React, {useState} from 'react';\r\nimport Box from \"@material-ui/core/Box\";\r\nimport {styled} from \"@material-ui/core/styles\";\r\nimport {CircularProgress, TextField} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport api from \"../other/api\";\r\nimport {useNavigate} from \"@reach/router\";\r\nconst Custom = styled(TextField)({\r\n    borderRadius: \"4px\",\r\n    backgroundColor: \"rgb(255,255,255)\",\r\n});\r\n\r\nconst style = {\r\n    Element: {\r\n        width: \"100%\",\r\n        marginBottom: \"15px\"\r\n    },\r\n    Container: {\r\n        height: \"100vh\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\"\r\n    }\r\n}\r\n\r\n\r\nexport default (props) =>{\r\n    const navigate = useNavigate();\r\n    const [title,setTitle] = useState(\"\");\r\n    const [author,setAuthor] = useState(\"\");\r\n    const [description,setDescription] = useState(\"\");\r\n    const [loading, setLoading] = useState(false);\r\n    const Submit = () => {\r\n        setLoading(true);\r\n        const obj = {\r\n            title:title,\r\n            author:author,\r\n            description: description\r\n        }\r\n        api.addPost(props.topic, obj).then(x =>{\r\n            setLoading(false);\r\n            navigate(\"/SubDit/topics/\" + props.topic)\r\n        })\r\n    }\r\n    return(\r\n        <Container maxWidth=\"sm\" style = {style.Container}>\r\n            <Typography variant=\"h5\" style = {{marginBottom: 15}}>\r\n                You are adding a post to the topic: {props.topic}\r\n            </Typography>\r\n            <Custom color = {\"primary\"} onChange = {event => setTitle(event.target.value)} value = {title} style ={style.Element} id=\"outlined-basic\" label=\"Title\" variant=\"filled\" />\r\n            <Custom color = {\"primary\"} onChange = {event => setAuthor(event.target.value)} value = {author} style ={style.Element} id=\"outlined-basic\" label=\"Author\" variant=\"filled\" />\r\n            <Custom color = {\"primary\"} multiline rows = {5} onChange = {event => setDescription(event.target.value)} value = {description} style ={style.Element} id=\"outlined-basic\" label=\"Body\" variant = \"filled\"/>\r\n            {loading ?\r\n                <CircularProgress style ={{zIndex: \"100\", marginTop: \"10px\"}}/> :\r\n                <Button onClick={Submit} style={style.Element} variant=\"contained\" color=\"primary\">\r\n                    Submit\r\n                </Button>}\r\n        </Container>\r\n    )\r\n}","import React from 'react';\r\nimport \"../style/index.css\";\r\nimport { Router, Link } from \"@reach/router\"\r\nimport Home from \"./Home\";\r\nimport Topic from \"./Topic\";\r\nimport AddTopic from \"./AddTopic\";\r\nimport AddPost from \"./AddPost\";\r\n\r\nconst Empty = ({ children }) => {\r\n    return children;\r\n}\r\n\r\nconst Index = () => {\r\n    return(\r\n        <Router>\r\n            <Empty path = \"/SubDit\">\r\n                <Home path = \"/\"/>\r\n                <Topic path = \"/topics/:title\"/>\r\n                <AddTopic path = \"/addtopic\"/>\r\n                <AddPost path = \"/addpost/:topic\"/>\r\n                <Home default />\r\n            </Empty>\r\n        </Router>\r\n    )\r\n}\r\nexport default Index;","import React from 'react';\nimport Index from \"./components/index\"\n\nfunction App() {\n  return (\n    <Index/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}